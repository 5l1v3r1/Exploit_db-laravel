<?php

namespace App\Http\Controllers;
use Auth;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Gate;
use Illuminate\Support\Facades\Input;
use App\Exploit;
use App\User;
use App\Platform;
use App\Category;
use Highlight\Highlighter;
class ExploitController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index($id , $category) 
    {
        $exploits = Exploit::getExploitsByCategory($id);
        $category_info = Category::getCategory($id);
        return view('exploitsList'  , ['exploits' => $exploits , 'category_info' => $category_info ]);
    }  
    public function detail($id)
    {
        $exploit = Exploit::detail($id);
        if (empty($exploit)) {
            abort(404);
        }
        $highlighter = new Highlighter();
        $highlighter->setAutodetectLanguages(array('ruby', 'python', 'php', 'HTML', 'perl', 'sql', 'c', 'c++', 'shell'));
        $markupHighlightedCodeObject = $highlighter->highlightAuto($exploit->description);
        return view('detail', ['exploit' => $exploit , 'code' => $markupHighlightedCodeObject] );
    }
    public function exploitManage()
    {
        $exploits = Exploit::getAllExploits();
        return view('admin.exploits.index' , ['exploits' => $exploits]);
    }
    public function exploitsByUser()
    {
        $exploits = User::findOrFail(Auth::id())->exploits()->get(); 
        return view('profile.exploits.index' , ['exploits' => $exploits]);
    }
    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $this->authorize('create', Exploit::class);
        $categories = Category::all();
        $Platforms = Platform::all();
        return view('profile.exploits.create' ,  ['categories' => $categories , 'platfomrs' => $Platforms] );
    }
    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $this->validate($request , [
            'title' => 'required',
            'category' => 'required',
            'description' => 'required',
            'platform' => 'required',
            'language' => 'required',
            'exploitFile' => 'mimes:zip|max:2048',
        ]);
        $file = $request->file('exploitFile');
        $fileToStorage = '';
        if (!empty($file))
        {
           $fileToStorage = time().'.'.$file->getClientOriginalExtension();
           $destinationPath = storage_path('/app/downloads/');
           $fileToStorage = md5($fileToStorage);
           $file->move($destinationPath, $fileToStorage);  
        }
        $exploit = new Exploit();
        $exploit->title = $request->title;
        $exploit->date = date('Y-m-d'); 
        $exploit->description = $request->description;
        $exploit->platform_id = $request->platform;
        $exploit->category_id = $request->category;
        $exploit->type = $request->type;
        $exploit->language = $request->language;
        $exploit->user_id = Auth::id() ;
        $exploit->exploitfile = $fileToStorage;
        $exploit->save();
        return redirect()->route('allMyexploits');
    }
    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        $categories = Category::all();
        $Platforms = Platform::all();
        $exploit = Exploit::find($id);
        return view('profile.exploits.edit' ,  ['exploit' => $exploit , 'categories' => $categories , 'platfomrs' => $Platforms] );
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $exploit = Exploit::findOrFail($id);      
        $this->authorize('update', $exploit);
        $this->validate($request , [
            'title' => 'required',
            'category' => 'required',
            'description' => 'required',
            'platform' => 'required',
            'exploitFile' => 'mimes:zip|max:2048',
        ]);
        $mode = $request->input('mode'); // from where this request commming from : Admin or user
        $file = $request->file('exploitFile');
        $fileToStorage = '';
        if (!empty($file))
        {
           $fileToStorage = time().'.'.$file->getClientOriginalExtension();
           $destinationPath = storage_path('/app/downloads/');
           $fileToStorage = md5($fileToStorage);
           $file->move($destinationPath, $fileToStorage);  
        }
        $exploit->title = $request->title;
        $exploit->description = $request->description;
        $exploit->platform_id = $request->platform;
        $exploit->category_id = $request->category;
        $exploit->type = $request->type;
        $exploit->language = $request->language;
        $exploit->user_id = Auth::id() ;
        $exploit->exploitfile = $fileToStorage;
        $exploit->save();
        $redirectTo = array('1' => 'allMyexploits' , '0' => 'admin.exploit');
        return redirect()->route($redirectTo[$mode]);
    }
    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy(Request $request , $id)
    {
        $mode = $request->input('mode'); // from where this request commming from : Admin or user
        $exploit = Exploit::find($id);
        $exploit->delete();
        $redirectTo = array('1' => 'allMyexploits' , '0' => 'admin.exploit');
        return redirect()->route($redirectTo[$mode]);
    }
    public function publish($id,$value)
    {
        $exploit = Exploit::findOrFail($id);
        $exploit->enabled = $value ;
        $exploit->save();
        return redirect()->route('admin.exploit');
    }
    public function download($filename ="")
    {
        // Check if file exists in app/storage/file folder
        $file_path = storage_path() . "/app/downloads/" . $filename;
        $headers = array(
            'Content-Type: "application/octet-stream',
            'Content-Disposition: attachment; filename='.$filename,
        );
        if ( file_exists( $file_path ) ) {
            // Send Download
            return \Response::download( $file_path, $filename, $headers );
        } else {
            // Error
            exit( 'Requested file does not exist on our server!' );
        }
    }
    public function search_form()
    {
       return view('search.form');
    }
    public function search()
    {
       $key  = Input::get('key');
       $category = Input::get('cat'); 
       $platform = Input::get('platform'); 
       $resultat = Exploit::search($key, $category, $platform);
       return view('search.resultat' , ['resultats' => $resultat]);
    }
    public function platform($platform)
    {
       $resultats = Exploit::getByPlatform($platform);
       return view('exploitListByPlatform' , ['resultats'=> $resultats]);
    }
}
